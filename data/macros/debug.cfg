#define VAR_MENU_OPTION
    [if]
        [variable]
            name=extra_debug
            equals=yes
        [/variable]
        [then]
            {DISPLAY_UNIT_POINTS_DEBUG}
            {DISPLAY_EXTRA_POINTS_DEBUG}
            {DISPLAY_BASE_HP_FACTOR_DEBUG}
            {DISPLAY_MAX_EXTRA_DMG_DEBUG}
            {DISPLAY_HEALTH_PERCENTAGE_DEBUG}
            {DISPLAY_LUA_OUTCOME_DEBUG}
        [/then]
    [/if]
#enddef

#define DISPLAY_UNIT_POINTS_DEBUG
    {VARIABLE left_unit_points $players[0].alive_units}
    {VARIABLE_OP left_unit_points sub $players[0].alive_enemies}
    {VARIABLE right_unit_points $players[1].alive_units}
    {VARIABLE_OP right_unit_points sub $players[1].alive_enemies}
    
    [label]
        x=2
        y=5
        color=225,225,225
        text="UP: $left_unit_points / $right_unit_points"
    [/label]

    {CLEAR_VARIABLE left_unit_points}
    {CLEAR_VARIABLE right_unit_points}
#enddef

#define DISPLAY_EXTRA_POINTS_DEBUG
    [label]
        x,y=2,6
        color=245,125,125
        text="EHP: $players[0].extra_hp / $players[1].extra_hp"
    [/label]
    [label]
        x,y=2,7
        color=245,245,125
        text="EDP: $players[0].extra_dmg - $players[0].extra_strikes / $players[1].extra_dmg - $players[1].extra_strikes"
    [/label]
#enddef

#define DISPLAY_BASE_HP_FACTOR_DEBUG
    [label]
        x,y=2,8
        color=55,235,235
        text="BHPF: $players[0].base_hp_factor|% / $players[1].base_hp_factor|%"
    [/label]
#enddef

#define DISPLAY_MAX_EXTRA_DMG_DEBUG
    [label]
        x,y=2,9
        color=140,140,140
        text="MED: $players[0].max_extra_dmg / $players[1].max_extra_dmg"
    [/label]
#enddef

#define DISPLAY_HEALTH_PERCENTAGE_DEBUG
    {VARIABLE left_health_status $players[0].total_hp}
    [set_variable]
        name=left_health_status
        divide=$players[0].total_max_hp
        round=2
    [/set_variable]
    {VARIABLE_OP left_health_status multiply 100}
    
    {VARIABLE right_health_status $players[1].total_hp}
    [set_variable]
        name=right_health_status
        divide=$players[1].total_max_hp
        round=2
    [/set_variable]
    {VARIABLE_OP right_health_status multiply 100}
    
    [label]
        x,y=2,10
        color=70,150,250
        text="HS: $left_health_status|% / $right_health_status|%"
    [/label]

    {CLEAR_VARIABLE left_health_status}
    {CLEAR_VARIABLE right_health_status}
#enddef

#define DISPLAY_LUA_OUTCOME_DEBUG
    {DISPLAY_LUA_PLAYER 0}
    {DISPLAY_LUA_PLAYER 1}
    {DISPLAY_LUA_DATA}
    {CLEAR_LUA_DEBUG}
#enddef

#define DISPLAY_LUA_DATA
    [label]
        x,y=2,11
        color=235,55,55
        text="RHPB: $debug_data[0].enemy_hp_bonus|% + $debug_data[0].base_hp_bonus|% / $debug_data[1].enemy_hp_bonus|% + $debug_data[1].base_hp_bonus|%"
    [/label]
    [label]
        x,y=2,12
        color=245,245,125
        text="RDB: $debug_data[0].raw_dmg_bonus|% - $debug_data[0].raw_strikes_bonus|% / $debug_data[1].raw_dmg_bonus|% - $debug_data[1].raw_strikes_bonus|%"
    [/label]
    [label]
        x,y=2,13
        color=55,235,55
        text="BR/H: $debug_data[0].bonus_ratio : $debug_data[0].handicap / $debug_data[1].bonus_ratio : $debug_data[1].handicap"
    [/label]
    [label]
        x,y=2,14
        color=235,55,55
        text="HPB: $debug_data[0].real_hp_factor|% / $debug_data[1].real_hp_factor|%"
    [/label]
    [label]
        x,y=2,15
        color=235,235,55
        text="DB: $debug_data[0].real_dmg_bonus|% - $debug_data[0].real_strikes_bonus|% / $debug_data[1].real_dmg_bonus|% - $debug_data[1].real_strikes_bonus|%"
    [/label]
#enddef

#define DISPLAY_LUA_PLAYER PLAYER
    {VARIABLE debug_hp_factor $players[{PLAYER}].base_hp_factor}
    {VARIABLE debug_extra_hp $players[{PLAYER}].extra_hp}
    {VARIABLE debug_extra_dmg $players[{PLAYER}].extra_dmg}
    {VARIABLE debug_extra_strikes $players[{PLAYER}].extra_strikes}
    {VARIABLE debug_max_extra_dmg $players[{PLAYER}].max_extra_dmg}
    {VARIABLE debug_progress_factor $players[{PLAYER}].progress_factor}
    {VARIABLE debug_unit_points $players[{PLAYER}].alive_units}
    {VARIABLE debug_hp_percentage $players[{PLAYER}].total_hp}
    {VARIABLE_OP debug_hp_percentage divide $players[{PLAYER}].total_max_hp}
    {VARIABLE debug_player_index {PLAYER}}
    [set_variables]
        name=debug_data
        mode=append
        [value]
            foo=bar
        [/value]
    [/set_variables]

    [lua]
        code = << 
            local i = wesnoth.get_variable "debug_player_index"
            local extra_hp = wesnoth.get_variable "debug_extra_hp"
            local extra_dmg = wesnoth.get_variable "debug_extra_dmg"
            local extra_strikes = wesnoth.get_variable "debug_extra_strikes"
            local max_extra_dmg = wesnoth.get_variable "debug_max_extra_dmg"
            local hp_factor = wesnoth.get_variable "debug_hp_factor"
            local hp_percentage = wesnoth.get_variable "debug_hp_percentage"
            local current_turn = wesnoth.get_variable "turn_number"
            local progress_factor = wesnoth.get_variable "debug_progress_factor"
			local unit_points = wesnoth.get_variable "debug_unit_points"

            local bonus_ratio = get_bonus_ratio_from_max_extra_dmg(max_extra_dmg)
            local dmg_bonus = get_dmg_bonus_from_extra_hp(extra_hp)
            local strikes_bonus = get_strikes_bonus_from_extra_hp(extra_hp)
            local enemy_hp_bonus = get_hp_bonus_from_extra_dmg(extra_dmg, extra_strikes)
            local turn_hp_bonus = get_hp_bonus_from_turn_number(current_turn, progress_factor)
            local handicap = get_bonus_handicap_from_hp_percentage(hp_percentage)
			local points_hp_bonus = get_hp_bonus_from_unit_points(unit_points)

            local real_dmg_bonus = dmg_bonus * bonus_ratio * handicap
            local real_strikes_bonus = strikes_bonus * bonus_ratio * handicap
            local real_hp_factor = hp_factor + (points_hp_bonus + enemy_hp_bonus) * bonus_ratio * handicap + turn_hp_bonus

            wesnoth.set_variable("debug_data[" .. i .. "].bonus_ratio", bonus_ratio)
            wesnoth.set_variable("debug_data[" .. i .. "].handicap", handicap)
            wesnoth.set_variable("debug_data[" .. i .. "].base_hp_bonus", turn_hp_bonus + hp_factor)
            wesnoth.set_variable("debug_data[" .. i .. "].enemy_hp_bonus", enemy_hp_bonus)
            wesnoth.set_variable("debug_data[" .. i .. "].real_hp_factor", real_hp_factor)
            wesnoth.set_variable("debug_data[" .. i .. "].raw_dmg_bonus", dmg_bonus)
            wesnoth.set_variable("debug_data[" .. i .. "].raw_strikes_bonus", strikes_bonus)
            wesnoth.set_variable("debug_data[" .. i .. "].real_dmg_bonus", real_dmg_bonus)
            wesnoth.set_variable("debug_data[" .. i .. "].real_strikes_bonus", real_strikes_bonus)
        >>
    [/lua]
#enddef

#define CLEAR_LUA_DEBUG
    {CLEAR_VARIABLE debug_hp_factor}
    {CLEAR_VARIABLE debug_extra_hp}
    {CLEAR_VARIABLE debug_extra_dmg}
    {CLEAR_VARIABLE debug_extra_strikes}
    {CLEAR_VARIABLE debug_max_extra_dmg}
    {CLEAR_VARIABLE debug_hp_percentage}
    {CLEAR_VARIABLE debug_data}
    {CLEAR_VARIABLE debug_player_index}
#enddef
