#define LUA_FUNCTIONS
    [lua]
        code = <<
            H = wesnoth.require "lua/helper.lua"
        
            function set_add_enemy(side_var, specials_var, terrains, enemy_level, faction, var_name)
                local t = {['t'] = 'flat', ['w'] = 'water', ['s'] = 'swamp', ['d'] = 'sand', ['f'] = 'forest', ['h'] = 'hills', ['c'] = 'caves', ['i'] = 'snow'}
                local max = 0
                local min = 100
				local specials = wesnoth.get_variable(specials_var)
                for i = 1, #terrains do
                    local c = terrains:sub(i,i)
                    local terrain = t[c]
                    local user_level = wesnoth.get_variable(side_var .. "." .. terrain)
                    if user_level > max then max = user_level else end
                    if user_level < min then min = user_level else end
                end
                if max > 1 and max - min > 2 then
                    max = max - 1
                end

                if enemy_level <= max and string.find(specials, faction) then
                    wesnoth.set_variable(var_name, true)
                else
                    wesnoth.set_variable(var_name, false)
                end
            end

            function third_player_adjustment(terrain_key, base)
                local value = wesnoth.get_variable("players[2].diff_table." .. terrain_key)
                if base > 4 then
                    if value > 3 then
                        return 1
                    else
                        return 0
                    end
                elseif value > 5 then
                    return 1
                else
                    return 0
                end
            end

            function parse_difficulty_levels(textual, player_var, adjust_3p)
                H.set_variable_array(player_var .. ".diff_table", {})
                local diff_level = wesnoth.get_variable "difficulty_adjust"
                local levels_sum = 0
                local levels = {['flat'] = 1, ['water'] = 3, ['swamp'] = 5, ['sand'] = 7, ['forest'] = 9, ['hills'] = 11, ['caves'] = 13, ['snow'] = 15}
                local queryindex = {'flat', 'water', 'swamp', 'sand', 'forest', 'hills', 'caves', 'snow'}
                local temp = 0
                local level_label = ""
                local base_label = ""
				local dla = 0
				local dla_sum = 0
				local dla_sum_low = 0
                local v = 1
                for _,k in ipairs(queryindex) do
                    v = levels[k]
                    temp = tonumber(textual:sub(v, v))
                    if temp < 1 then temp = 1 else end
                    if adjust_3p then
                        temp = temp + third_player_adjustment(k, temp)
                    end
					dla = diff_level_adjustment(temp, diff_level, dla_sum, dla_sum_low, k)
					dla_sum = dla_sum + dla
					if dla ~= 0 and temp < 4 then
						dla_sum_low = dla_sum_low + dla
					end
					temp = temp + dla
                    levels_sum = levels_sum + temp
                    wesnoth.set_variable(player_var .. ".diff_table." .. k, temp)
                    if level_label:len() > 0 then
                        level_label = level_label .. "/" .. tostring(temp)
                        base_label = base_label .. "/" .. textual:sub(v, v)
                    else
                        level_label = tostring(temp)
                        base_label = textual:sub(v, v)
                    end
                end

                local progress_factor = wesnoth.get_variable(player_var .. ".progress_factor")
                
                local alive_units = get_base_alive_units_from_avg_lvl(levels_sum)
                local gold_factor = get_gold_factor_from_avg_lvl(levels_sum)
				progress_factor = progress_factor + get_progress_factor(levels_sum)
                wesnoth.set_variable(player_var .. ".base_alive_units", alive_units)
                wesnoth.set_variable(player_var .. ".gold_factor", gold_factor)
                wesnoth.set_variable(player_var .. ".diff_label", level_label)
                wesnoth.set_variable(player_var .. ".base_label", base_label)
                wesnoth.set_variable(player_var .. ".progress_factor", progress_factor)
            end

			function diff_level_adjustment(value, level, limit, low_limit, type)
				if level == 2 then
					if (value > 3 and limit < 3) or (value > 1 and value < 4 and low_limit < 2) then
						return 1
					else
						return 0
					end
				elseif level == 1 then
					if (value > 3 and limit < 2 and type ~= 'flat') or (value > 1 and value < 4 and low_limit < 1 and type ~= 'flat') then
						return 1
					else
						return 0
					end
				elseif level == -1 then
					if (value > 5 and limit > -2 and type ~= 'flat') or (value > 3 and limit > -2 and type ~= 'flat') then
						return -1
					else
						return 0
					end
				elseif level == -2 then
					if value > 4 or (low_limit > -2 and value > 1 and type ~= 'flat') then
						return -1
					else
						return 0
					end
				else
					return 0
				end
			end

            function get_base_alive_units_from_avg_lvl(sum)
                local avg = sum / 8
                
                if avg > 7.2 then
                    return 1
                elseif avg > 4.4 then
                    return 0
                elseif avg > 3.6 then
                    return -1
                elseif avg > 2.8 then
                    return -2
                else
                    return -3
                end
            end

            function get_gold_factor_from_avg_lvl(sum)
                local avg = sum / 8
                
                if avg > 4.4 then
                    return 1
                elseif avg > 3.6 then
                    return 0.94
                elseif avg > 2.8 then
                    return 0.82
                elseif avg > 2.2 then
                    return 0.70
                else
                    return 0.60
                end
            end

            function get_progress_factor(sum)
                local avg = sum / 8
				return math.floor(10 * avg / 7.0) / 10 * 5.0
            end

            function display_map_message()
                local side_a = wesnoth.get_variable "players[0].base_label"
                local side_b = wesnoth.get_variable "players[1].base_label"
                local side_c = wesnoth.get_variable "players[2].base_label"
                local p1in = wesnoth.get_variable "players[0].active"
                local p2in = wesnoth.get_variable "players[1].active"
                local p3in = wesnoth.get_variable "players[2].active"
                local adjustment = wesnoth.get_variable "difficulty_adjust"
                local version = wesnoth.get_variable "ass_version"
                local lose_when_no_leader = wesnoth.get_variable "lose_when_no_leader"
                local final_round = wesnoth.get_variable "game_settings[0].destroyer_round"
                local important = wesnoth.get_variable "game_settings[0].important"
                local fog_mode = wesnoth.get_variable "fog_mode"
                local lava_pace = wesnoth.get_variable "lava_pace"
                local wave_mode = wesnoth.get_variable "wave_mode"
                local three_players = wesnoth.get_variable "three_players_game"
                local adjustment_str = ""
				local pvp_mode = wesnoth.get_variable "pvp_mode"
				local spawn_wd = wesnoth.get_variable "spawn_wd"
				local lava_hold = wesnoth.get_variable "lava_hold"
				local is_ladder_wave_mode = wesnoth.get_variable "is_ladder_wave_mode"
                if adjustment == 2 then
                    adjustment_str = "Hardcore"
				elseif adjustment == 1 then
					adjustment_str = "Hard"
				elseif adjustment == 0 then
					adjustment_str = "Normal"
				elseif adjustment == -1 then
					adjustment_str = "Easy"
				elseif adjustment == -2 then
					adjustment_str = "Beginner"
                end
                local map_settings = "Follow leader: "
                if lose_when_no_leader == true then
                    map_settings = map_settings .. "yes"
                else
                    map_settings = map_settings .. "no"
                end
				
				local wave_mode_print = "Default"
				if is_ladder_wave_mode == true then
					wave_mode_print = "Wheel of Fortune"
				elseif wave_mode == "same" then
					wave_mode_print = "Mirrored (same)"
				elseif wave_mode == "opposite" then
					wave_mode_print = "Mirrored (opposite)"
				elseif wave_mode == "alternate" then
					wave_mode_print = "Mirrored (alternate)"
				elseif wave_mode == "faction" then
					wave_mode_print = "Random faction"
				elseif wave_mode == "random" then
					wave_mode_print = "Fully Random"
				end

				map_settings = map_settings .. " | Wave mode: " .. wave_mode_print
                map_settings = map_settings .. " | Lava pace: " .. format_lava_pace(lava_pace) .. " / " .. tostring(lava_hold) .. " | Fog mode: "
                if fog_mode == true then
                    map_settings = map_settings .. "yes"
                else
                    map_settings = map_settings .. "no"
                end
				if pvp_mode == true then
					if spawn_wd == true then
						map_settings = map_settings .. " | Final Boss: yes"
					else
						map_settings = map_settings .. " | Final Boss: no"
					end
				end

                local diff_settings = ""
                if p1in == true then
                    diff_settings = diff_settings .. "Side A: " .. side_a .. " | "
                end
                if p2in == true then
                    diff_settings = diff_settings .. "Side B: " .. side_b .. " | "
                end
                if p3in == true then
                    diff_settings = diff_settings .. "Side C: " .. side_c .. " | "
				elseif p2in == true then
					if pvp_mode == true then
						diff_settings = diff_settings .. "PvP: yes | "
					else
						diff_settings = diff_settings .. "PvP: no | "
					end
                end
                diff_settings = diff_settings .. "Level: " .. adjustment_str .. " | Final round: " .. tostring(calculate_final_round(final_round, lava_pace))

                wesnoth.message("Ageless Scrolling Survival v." .. version, diff_settings)
                wesnoth.message("Ageless Scrolling Survival v." .. version, map_settings)
                if three_players == true then
                    wesnoth.message("Ageless Scrolling Survival v." .. version, "Remember! If you want to win, you must think, plan and act as a team! Communicate! It's a lot of fun!")
                    wesnoth.message("Ageless Scrolling Survival v." .. version, "Please note, all gold captured from gold chests found across the map is spread equally amongst all players.")
                end
                if important ~= "" then
                    wesnoth.message("!!!IMPORTANT!!!", important)
                end
            end

            function format_lava_pace(lava_pace)
                if lava_pace == 'wave120' then
                    return '1-2-0'
                elseif lava_pace == 'wave103' then
                    return '1-0-3'
                elseif lava_pace == 'wave1020' then
                    return '1-0-2-0'
                elseif lava_pace == 'wave10100' then
                    return '1-0-1-0-0'
                else
                    return lava_pace
                end
            end

            function calculate_final_round(final_round, lava_pace)
                if lava_pace == 'slow' then
                    return (final_round - 1) * 2
                elseif lava_pace == 'fast' then
                    return math.floor(final_round / 2) + 2
                elseif lava_pace == 'wave120' then
                    local mod = math.fmod(final_round - 4, 3)
                    if mod == 0 then
                        return final_round - 1
                    else
                        return final_round
                    end
                elseif lava_pace == 'wave103' then
                    return math.floor(final_round * 3 / 4) + 2
                elseif lava_pace == 'wave1020' then
                    return math.floor((final_round - 1) * 4 / 3)
                elseif lava_pace == 'wave10100' then
                    return math.floor((final_round - 1)* 5 / 2)
                else
                    return final_round
                end
            end

            function display_victory_message()
                local version = wesnoth.get_variable "ass_version"
                wesnoth.message("Ageless Scrolling Survival v." .. version, "CONGRATULATIONS! You've hunted down the World Destroyer! Please consider posting the replay on the wesnoth forum and join the Hall of Fame! Thanks for playing!")
            end

            function set_side_diff_level(recruit_str, var_name, factor_vname, specials_vname)
                for _,v in ipairs(faction_units_table) do
                    if string.find(recruit_str, v['unit']) then
                        wesnoth.set_variable(var_name, v['levels'])
                        wesnoth.set_variable(factor_vname, v['factor'])
                        wesnoth.set_variable(specials_vname, v['specials'])
                        break
                    end
                end
            end

            function treasure_gold(base)
                local adjustment = wesnoth.get_variable "difficulty_adjust"
                local cooperative_map = wesnoth.get_variable "cooperative_map"
                local is3p = wesnoth.get_variable "three_players_game"
                local final = base
                if is3p then
                    final = math.floor(final * 1.2)
                elseif cooperative_map == true then
                    final = final + 5
                end
                final = final + 5 * adjustment
                return final
            end

            function get_random_upgrade_id(group_id)
                local group = rune_upgrade_groups[group_id]
                return H.rand(group)
            end

            function get_points_from_unit_hp(maxhp)
                if maxhp > 250 then
                    return 8
                elseif maxhp > 220 then
                    return 5
                elseif maxhp > 185 then
                    return 3
                elseif maxhp > 145 then
                    return 2
                elseif maxhp > 105 then
                    return 1
                else
                    return 0
                end
            end

            function get_points_from_extra_dmg(max_extra_dmg)
                if max_extra_dmg > 150 then
                    return 5
                elseif max_extra_dmg > 100 then
                    return 4
                elseif max_extra_dmg > 60 then
                    return 3
                elseif max_extra_dmg > 40 then
                    return 2
                elseif max_extra_dmg > 25 then
                    return 1
                else
                    return 0
                end
            end

            function get_dmg_bonus_from_extra_hp(extra_hp)
                if extra_hp > 615 then
                    return 75
                elseif extra_hp > 495 then
                    return 60
                elseif extra_hp > 405 then
                    return 50
                elseif extra_hp > 345 then
                    return 42
                elseif extra_hp > 285 then
                    return 36
                elseif extra_hp > 215 then
                    return 30
                elseif extra_hp > 180 then
                    return 24
                elseif extra_hp > 155 then
                    return 20
                elseif extra_hp > 120 then
                    return 16
                elseif extra_hp > 82 then
                    return 10
                elseif extra_hp > 52 then
                    return 7
                elseif extra_hp > 32 then
                    return 4
                else
                    return 0
                end
            end

            function get_strikes_bonus_from_extra_hp(extra_hp)
                if extra_hp > 425 then
                    return 33
                elseif extra_hp > 325 then
                    return 26
                elseif extra_hp > 265 then
                    return 20
                elseif extra_hp > 185 then
                    return 14
                elseif extra_hp > 115 then
                    return 9
                elseif extra_hp > 70 then
                    return 6
                else
                    return 0
                end
            end

            function get_bonus_ratio_from_max_extra_dmg(max_extra_dmg)
                local bonus = 0
                local lava_pace = wesnoth.get_variable "lava_pace"
                local adjustment = wesnoth.get_variable "difficulty_adjust"

                if lava_pace == 'fast' then
                    bonus = -0.15
                elseif lava_pace == 'slow' then
                    bonus = 0.1
                elseif lava_pace == 'wave103' then
                    bonus = -0.05
                elseif lava_pace == 'wave1020' then
                    bonus = 0.05
                elseif lava_pace == 'wave10100' then
                    bonus = 0.15
                end

				if adjustment == 2 then
					bonus = bonus + 0.1
				elseif adjustment == -2 then
					bonus = bonus - 0.1
				end

                if max_extra_dmg > 365 then
                    return 2.5 + bonus
                elseif max_extra_dmg > 300 then
                    return 2.25 + bonus
                elseif max_extra_dmg > 240 then
                    return 2.0 + bonus
                elseif max_extra_dmg > 180 then
                    return 1.75 + bonus
                elseif max_extra_dmg > 120 then
                    return 1.5 + bonus
                elseif max_extra_dmg > 80 then
                    return 1.3 + bonus
                elseif max_extra_dmg > 45 then
                    return 1.2 + bonus
                elseif max_extra_dmg > 30 then
                    return 1.1 + bonus
                elseif max_extra_dmg > 20 then
                    return 1.0 + bonus
                elseif max_extra_dmg > 12 then
                    return 0.9 + bonus
                elseif max_extra_dmg > 4 then
                    return 0.8 + bonus
                else
                    return 0.7 + bonus
                end
            end

            function get_hp_bonus_from_unit_points(points, enemy)
				local difference = points - enemy
				local ret = 0

                if difference > 50 then
                    ret = 100
                elseif difference > 45 then
                    ret = 80
                elseif difference > 40 then
                    ret = 65
                elseif difference > 35 then
                    ret = 50
                elseif difference > 30 then
                    ret = 35
                elseif difference > 25 then
                    ret = 25
                elseif difference > 21 then
                    ret = 20
                elseif difference > 18 then
                    ret = 15
                elseif difference > 14 then
                    ret = 10
                elseif difference > 10 then
                    ret = 5
                end

                if points > 90 then
                    return ret + 40
                elseif points > 70 then
                    return ret + 30
                elseif points > 50 then
                    return ret + 20
                elseif points > 35 then
                    return ret + 15
                elseif points > 25 then
                    return ret + 10
                elseif points > 20 then
                    return ret + 7
                elseif points > 15 then
                    return ret + 4
				else
					return ret
                end
            end

            function get_hp_bonus_from_extra_dmg(dmg, strikes)
                local bonus_from_strikes = 0
                if strikes > 2 then
                    bonus_from_strikes = 0
                elseif strikes > 0 then
                    bonus_from_strikes = -6
                end

                if dmg > 15 then
                    dmg = dmg + 1
                elseif dmg > 10 then
                    dmg = dmg - 1
                elseif dmg > 7 then
                    dmg = dmg - 2
                elseif dmg > 4 then
                    dmg = 4
                elseif dmg > 2 then
                    dmg = 2
                end
             
                return strikes * 7.5 + dmg * 0.7 + bonus_from_strikes
            end

            function get_bonus_handicap_from_hp_percentage(hp_percentage)
                if hp_percentage > 0.86 then
                    return 1.0
                elseif hp_percentage > 0.75 then
                    return 0.9
                elseif hp_percentage > 0.62 then
                    return 0.75
                elseif hp_percentage > 0.45 then
                    return 0.55
                elseif hp_percentage > 0.36 then
                    return 0.4
                elseif hp_percentage > 0.25 then
                    return 0.3
                else
                    return 0.2
                end
            end

            function get_hp_bonus_from_turn_number(turn, progress_factor)
                local every_rounds = wesnoth.get_variable "game_settings[0].map_factor_rounds"
                return math.floor(turn / every_rounds) * progress_factor
            end

            function get_extra_points_from_unit_type(unit_type)
                if extra_point_units[unit_type] ~= nil then
                    return extra_point_units[unit_type]
                else
                    return 0
                end
            end

			function get_table_key_for_level(level)
				if level == 0 then
					return 'level_zero'
				elseif level == 1 then
					return 'level_one'
				elseif level == 2 then
					return 'level_two'
				elseif level == 3 then
					return 'level_three'
				elseif level == 4 then
					return 'level_four'
				else
					return 'level_five'
				end
			end

			function get_random_unit_type(level, default)
				local wave_mode = wesnoth.get_variable "wave_mode"
				local faction = wesnoth.get_variable "current_random_faction"
				local key = get_table_key_for_level(level)
				local table= {}

				if wave_mode == 'random' then
					table = unit_list['random'][key]
				elseif wave_mode == 'faction' then
					table = unit_list['factions'][faction][key]
				else
					return default
				end

				if table then
					local length = #table

					if length > 0 then
						local index = wesnoth.random(1, length)
						return table[index]
					end
				end

				return default
			end

			function get_random_unit(level, default)
				local turn = wesnoth.get_variable "turn_number"
				if turn ~= random_units_container['turn'] then
					random_units_container['turn'] = turn
					random_units_container['units'] = {}
				end

				if random_units_container['units'][default] == nil then
					random_units_container['units'][default] = get_random_unit_type(level, default)
				end

				return random_units_container['units'][default]
			end
        >>
    [/lua]
#enddef
